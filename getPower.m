%% Calculate the power at each grid point
% Args:
%   x: the variable of the optimization problem
%   G: the generated bytes for each sample
%   B: bandwidth B/s
%   N: the struct of grid locations
%   c: the location of the sink
%
% Reture:
%   P: a N_cnt * 1 vector of the power (W) at each grid point

function P = getPower(x, G, B, N, c)
N_cnt = size(N, 1);         % number of grid locations
v_cnt = size(x, 1);         % number of variables

% constant parameters setting
P0 = 0.01;                  % sleep power (W)
Ps = 0.2;                   % sensing power (W)
Prx = 0.1;                  % reception power (W)

% get the transformation matrix to extract x and eta
T_x = [eye(N_cnt), zeros(N_cnt, v_cnt - N_cnt)];
T_eta = [zeros(N_cnt, 2*N_cnt), eye(N_cnt), zeros(N_cnt, v_cnt - 3*N_cnt)];

% calculate the transmission power matrix
[Ptx, PtxB] = getPtx(N, N_cnt, c);
%disp(Ptx);

% extract flow matrix fij (N_cnt * N_cnt) from x
T_fij = [zeros(N_cnt^2, 3*N_cnt), eye(N_cnt^2), zeros(N_cnt^2, N_cnt)];
fij = T_fij * x;
fij = reshape(fij, N_cnt, N_cnt)'; % (i, j) is flow from i to j 
% extract flow to sink fiB (N_cnt * 1) from x
T_fiB = [zeros(N_cnt, v_cnt - N_cnt), eye(N_cnt)];
fiB = T_fiB * x;                   % (i) is flow from i to B

% calculate the power vector
P = repmat(P0, N_cnt, 1) + G * (T_x * x) .* (T_eta * x) + ...
    1/B * diag(Ptx * fij' + Prx * ones(N_cnt) * fij) + 1/B * PtxB .* fiB;
end

%% Calculate the distance matrix and transmission power matrix
% Args:
%   N: the struct of grid location
%   N_cnt: number of grid locations
%   c: the location of the sink
%
% Return:
%   Ptx: a N_cnt * N_cnt matrix of tx power between each pair of nodes
%   PtxB: a N_cnt * 1 matrix of tx power of node i to the sink
function [Ptx, PtxB] = getPtx(N, N_cnt, c)
% initialize the distance matrix
dist = zeros(N_cnt);
for i = 1:N_cnt
    for j = i+1:N_cnt
        dist(i, j) = norm(N(i).position - N(j).position);
        dist(j, i) = dist(i, j);
    end
end
% transform distance to transmission power
Pto = 0.22;
alpha = 3.5;
beta = 1e-8;
Ptx = repmat(Pto, N_cnt, N_cnt) + beta * (dist .^ alpha);

% calculate the distance and transmission power to the sink
distB = zeros(N_cnt, 1);
for i = 1:N_cnt
    distB(i) = norm(N(i).position - c);
end
PtxB = repmat(Pto, N_cnt, 1) + beta * (distB .^ alpha);
end


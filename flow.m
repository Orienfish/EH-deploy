%% Get the equality constraints of flow conservation
% Args:
%   x: the variables of the optimization problem
%   G: the generated bytes of each sample
%   N_cnt: the number of grid locations
%
% Return:
%   Z: a (N_cnt+1) * 1 vector which should be equal to zero

function Z = flow(x, G, N_cnt)
% initialization
v_cnt = size(x, 1);                % number of variables

% get the transformation matrix to extract x and eta
T_x = [eye(N_cnt), zeros(N_cnt, v_cnt - N_cnt)];
T_eta = [zeros(N_cnt, 2*N_cnt), eye(N_cnt), zeros(N_cnt, v_cnt - 3*N_cnt)];

% extract flow matrix fij (N_cnt * N_cnt) from x
T_fij = [zeros(N_cnt^2, 3*N_cnt), eye(N_cnt^2), zeros(N_cnt^2, N_cnt)];
fij = T_fij * x;
fij = reshape(fij, N_cnt, N_cnt)'; % (i, j) is flow from i to j 
% extract flow to sink fiB (N_cnt * 1) from x
T_fiB = [zeros(N_cnt, v_cnt - N_cnt), eye(N_cnt)];
fiB = T_fiB * x;                   % (i) is flow from i to B

% get the flow conservation at each grid point, Z is N_cnt * 1 here
Z = G * (T_x * x) .* (T_eta * x) + sum(fij, 1)' ... % in flow, sum of each col
    - sum(fij, 2) - fiB;                            % out flow, sum of each row
% all flows should be transmitted to sink
to_sink = sum(G * (T_x * x) .* (T_eta * x)) - sum(fiB);
% combine together to the (N_cnt+1) * 1 vector
Z = [Z; to_sink];
end


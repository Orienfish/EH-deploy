% main.m
clc;
clear;
close all;
warning('off','all');

%% Experiment 1: small scale simulation
% Set experiment options
% set scale of grid space
exp_opt.xScalem = 500;                         % m
exp_opt.yScalem = 500;                         % m
exp_opt.N_x = 10;
exp_opt.N_y = 10;

% basic parameters
exp_opt.S_r = 100;                       % sensing range in m
exp_opt.C_r = 120;                       % communication range in m
exp_opt.N_o = 20;                        % number of PoIs
exp_opt.K = 2;                           % K-coverage
exp_opt.G = 100;                         % generated bytes for each sample
exp_opt.B = 2000;                        % bandwidth B/s
exp_opt.eta = 0.2;                       % sampling frequency

% temperature addition to test sensitivity
exp_opt.temp_add = 4.0;

% specify the reliability options and targets
exp_opt.rel.SoH = true;
exp_opt.rel.SoHref = 0.90;
exp_opt.rel.T = 5;                              % years
exp_opt.rel.MTTF = true;
exp_opt.rel.MTTFref = 0.90;
exp_opt.rel.MTTFsolarref = 1.33;

% options to run which solver/algorithm
run.cplex = false;
run.rdtsh = false;
run.tsh = false;
run.srigh = false;
run.rdsrigh = false;

% which experiment to run
exp.small = false;
exp.large = false;
exp.sparse = false;
exp.temp_sense = true;

%% Experiment 1: small scale simulation
if exp.small
    % set alg to run
    run.cplex = true;
    run.rdtsh = true;
    run.tsh = true;
    run.srigh = true;

    % set test rounds
    iter = 40;

    % Call exp functions
    % Subtest 1: various number of targets
    N_o_list = [10, 15, 20, 25, 30];
    res_target_s = [];
    exp_opt.K = 1; % K-coverage
    for i=1:length(N_o_list)
        fprintf('Running small target exp with %d targets\n', N_o_list(i));
        for j=1:iter
            fprintf('iter %d\n', j);
            exp_opt.N_o = N_o_list(i);
            res = exp_func(run, exp_opt);
            while isempty(res)
                res = exp_func(run, exp_opt);
            end
            fill_resT(res, run, './res_target_small.csv');
        end
    end
    exp_opt.N_o = 20; % reset to standard valueexp_opt.N_x = 100; % reset to standard value

    % Subtest 2: various number of sites
    N_x_list = [10, 11, 12, 13, 14];
    res_site_s = [];
    for i=1:length(N_x_list)
        fprintf('Running small site exp with %d sites on x\n', N_x_list(i));
        for j=1:iter
            fprintf('iter %d\n', j);
            exp_opt.N_x = N_x_list(i);
            res = exp_func(run, exp_opt);
            while isempty(res)
                res = exp_func(run, exp_opt);
            end
            fill_resT(res, run, './res_site_small.csv');
        end
    end
    exp_opt.N_x = 10; % reset to standard value
end

%% Experiment 2: large scale simulation
if exp.large
    % set which alg to run
    run.rdtsh = true;
    run.tsh = true;
    run.srigh = true;
    
    % set scale of grid space
    exp_opt.xScalem = 5000;                         % m
    exp_opt.yScalem = 5000;                         % m
    exp_opt.N_x = 100;
    exp_opt.N_y = 100;
    exp_opt.K = 2;                            % K-coverage

    % set test rounds
    iter = 40;

    % Call exp functions
    % Subtest 1: various number of targets
    N_o_list = [50, 75, 100, 125, 150];
    res_target_l = [];
    for i=1:length(N_o_list)
        fprintf('Running large target exp with %d targets\n', N_o_list(i));
        for j=1:iter
            fprintf('iter %d\n', j);
            exp_opt.N_o = N_o_list(i);
            res = exp_func(run, exp_opt);
            while isempty(res)
                res = exp_func(run, exp_opt);
            end
            fill_resT(res, run, './res_target_large.csv');
        end
    end
    exp_opt.N_o = 100; % reset to standard value

    % Subtest 2: various number of sites
    N_x_list = [60, 80, 100, 120, 140];
    res_site_l = [];
    for i=1:length(N_x_list)
        fprintf('Running large site exp with %d sites on x\n', N_x_list(i));
        for j=1:iter
            fprintf('iter %d\n', j);
            exp_opt.N_x = N_x_list(i);
            res = exp_func(run, exp_opt);
            while isempty(res)
                res = exp_func(run, exp_opt);
            end
            fill_resT(res, run, './res_site_large.csv');
        end
    end
    exp_opt.N_x = 100; % reset to standard value
end

%% Experiment 3: sparsity level due to MTTFsolarref
if exp.sparse
	% set scale of grid space
    exp_opt.xScalem = 5000;                         % m
    exp_opt.yScalem = 5000;                         % m
    exp_opt.N_x = 100;
    exp_opt.N_y = 100;
    
    % set the MTTFsolarref value to test
    MTTFsolarref = [1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6];
    res_sparse = [];
    for i=1:length(MTTFsolarref)
        fprintf('Running sparsity level exp with MTTFsolar %f\n', MTTFsolarref(i));
        exp_opt.rel.MTTFsolarref = MTTFsolarref(i);
        res = exp_func(run, exp_opt);
        res_sparse = [res_sparse, res.sparse];
    end
    writematrix(res_sparse, 'res_sparse.csv');
    exp_opt.rel.MTTFsolarref = 1.33;
end

%% Experiment 4: temperature sensitivity test
if exp.temp_sense
    % set which alg to run
    run.rdtsh = true;
    
    % set scale of grid space
    exp_opt.xScalem = 5000;                         % m
    exp_opt.yScalem = 5000;                         % m
    exp_opt.N_x = 100;
    exp_opt.N_y = 100;
    exp_opt.N_o = 100;
    exp_opt.K = 2;                            % K-coverage

    % set test rounds
    iter = 20;
    
    % set the increased temperature to test
    N_temp_list = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0];
    res_temp_l = [];
    for i=1:length(N_temp_list)
        fprintf('Running temp sensitivity test with temp add %.1f\n', N_temp_list(i));
        for j=1:iter
            fprintf('iter %d\n', j);
            exp_opt.temp_add = N_temp_list(i);
            res = exp_func(run, exp_opt);
            while isempty(res)
                res = exp_func(run, exp_opt);
            end
            fill_resT(res, run, './res_temp_sense_large.csv');
        end
    end
    exp_opt.temp_add = 4.0;                   % reset to standard value
end

%% Appendix functions
% Fill in result table from the result struct and write table to file
% Args:
%   res: the result struct returned by exp_func
%   run: run options
%   filename: the file to write to
%
% Return:
%   resT: one line in the result table
function resT = fill_resT(res, run, filename)
% initialize one line of result table
varNames = {'opt_wo_fval', 'opt_wo_vio', 'opt_wo_sohmin', 'opt_wo_mttfmin', ...
            'opt_wo_time', ...
            'opt_fval', 'opt_vio', 'opt_sohmin', 'opt_mttfmin', ...
            'opt_time', ...
            'rdtsh_fval', 'rdtsh_vio', 'rdtsh_sohmin', 'rdtsh_mttfmin', ...
            'rdtsh_time', ...
            'tsh_fval', 'tsh_vio', 'tsh_sohmin', 'tsh_mttfmin', ...
            'tsh_time', ...
            'rdsrigh_fval', 'rdsrigh_vio', 'rdsrigh_sohmin', 'rdsrigh_mttfmin', ...
            'rdsrigh_time', ...
            'srigh_fval', 'srigh_vio', 'srigh_sohmin', 'srigh_mttfmin', ...
            'srigh_time'};
varTypes = {'double', 'double', 'double', 'double', 'double', ...
            'double', 'double', 'double', 'double', 'double', ...
            'double', 'double', 'double', 'double', 'double', ...
            'double', 'double', 'double', 'double', 'double', ...
            'double', 'double', 'double', 'double', 'double', ...
            'double', 'double', 'double', 'double', 'double'};
resT = table('Size', [1 length(varNames)], ...
    'VariableTypes', varTypes, 'VariableNames', varNames);
% fill in the item one by one if tested
if run.cplex
    % optimization without reliability constraints
    resT.opt_wo_fval(1) = res.sol_wo.fval;
    resT.opt_wo_vio(1) = res.sol_wo.vio;
    resT.opt_wo_sohmin(1) = res.sol_wo.sohmin(1);
    resT.opt_wo_mttfmin(1) = res.sol_wo.mttfmin(1);
    resT.opt_wo_time(1) = res.sol_wo.time;
    % optimization with reliability constraints
    resT.opt_fval(1) = res.sol_w.fval;
    resT.opt_vio(1) = res.sol_w.vio;
    resT.opt_sohmin(1) = res.sol_w.sohmin(1);
    resT.opt_mttfmin(1) = res.sol_w.mttfmin(1);
    resT.opt_time(1) = res.sol_w.time;
end
if run.rdtsh
    resT.rdtsh_fval(1) = res.sol_rdtsh.fval;
    resT.rdtsh_vio(1) = res.sol_rdtsh.vio;
    resT.rdtsh_sohmin(1) = res.sol_rdtsh.sohmin(1);
    resT.rdtsh_mttfmin(1) = res.sol_rdtsh.mttfmin(1);
    resT.rdtsh_time(1) = res.sol_rdtsh.time;
end
if run.tsh
    resT.tsh_fval(1) = res.sol_tsh.fval;
    resT.tsh_vio(1) = res.sol_tsh.vio;
    resT.tsh_sohmin(1) = res.sol_tsh.sohmin(1);
    resT.tsh_mttfmin(1) = res.sol_tsh.mttfmin(1);
    resT.tsh_time(1) = res.sol_tsh.time;
end
if run.rdsrigh
    resT.rdsrigh_fval(1) = res.sol_rdsrigh.fval;
    resT.rdsrigh_vio(1) = res.sol_rdsrigh.vio;
    resT.rdsrigh_sohmin(1) = res.sol_rdsrigh.sohmin(1);
    resT.rdsrigh_mttfmin(1) = res.sol_rdsrigh.mttfmin(1);
    resT.rdsrigh_time(1) = res.sol_rdsrigh.time;
end
if run.srigh
    resT.srigh_fval(1) = res.sol_srigh.fval;
    resT.srigh_vio(1) = res.sol_srigh.vio;
    resT.srigh_sohmin(1) = res.sol_srigh.sohmin(1);
    resT.srigh_mttfmin(1) = res.sol_srigh.mttfmin(1);
    resT.srigh_time(1) = res.sol_srigh.time;
end

% if this is the first line of result, write variables name
if ~exist(filename, 'file')
    writetable(resT, filename);
else % append to existing table
    writetable(resT, filename, 'WriteMode', 'Append', ...
        'WriteVariableNames', false);
end
end
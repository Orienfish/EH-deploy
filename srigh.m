%% srigh algorithm
% Cparams: basic parameters
% sparams: parameters for srigh
function [res] = srigh(Cparams, sparams)
% Cparams.M: number of deployment sites
% Cparams.N: number of targets
% Cparams.S_r: sensing radius
% Cparams.C_r: communication range in m
% Cparams.K: coverage requirements
% Cparams.dist: distance matrix between grid locations and the sink
% Cparams.Prx: reception power (W)
% Cparams.eta: sampling frequency
% Cparams.G: generated bytes for each sample
% Cparams.B: bandwidth B/s
% 
% sparams.A: surface area of the solar panel
% sparams.x: average solar irradiance
% sparams.O: deployment sites, struct
% sparams.T: targets
%
% res.exitflag: exit flag showing whether the problem is feasible
% res.x: binary vector of optimal node placement
% res.s: binary vector optimal sensor placement
% res.fij: float vector of flows between grid locations
% res.fiB: float vector of flows between grid locations and the si

s = zeros(Cparams.M, 1);            % binary vector of sensor placement
x = zeros(Cparams.M, 1);            % binary vector of node placement
q = repmat(Cparams.K, Cparams.N, 1);   % coverage requirement of each target
fij = zeros((Cparams.M)^2, 1);        % flow matrix between grids
fiB = zeros(Cparams.M, 1);          % flow vector to the sink
U = [];               % set of sites that a sensor has already been placed
eff_s = get_efficient_sensors(sparams.O, sparams.T, Cparams.S_r);
gamma = eff_s;

% T' <- {1, 2, ..., N}
T_prime = ones(1, Cparams.N);
for i = 1:Cparams.N
    T_prime(i) = i;
end

% qi' <- qi
qi_prime = q;

% omega_ik <- binary matrix storing whether the sensor in row i could
% cover the target in column j
o_cover = [];
O = sparams.O;
for i = 1:Cparams.M
    o_ik = cover_targets(O(i).position, sparams.T, Cparams.S_r);
    o_cover = vertcat(o_cover, o_ik');
end

% the cost vector of adding a solar panel
cost = sparams.w2 * (getPtx(Cparams.C_r) + Cparams.Prx) * Cparams.eta * ...
    Cparams.G / Cparams.B ./ vertcat(sparams.O(:).Ri);

G = create_graph(cost, sparams.O, Cparams.dist, Cparams.C_r, ...
        sparams.w1, sparams.w2);
    
plot(G,'EdgeLabel',G.Edges.Weight)
% begin selection process
while size(T_prime, 1) ~= 0
    % check whether to exit loop
    for i = 1:size(o_cover,2)
        % If there's a column have sum 0, it means that none of the sensors
        % could satisfy covering this target.
        % If this target is one of the targets whose covering requirement
        % hasn't been met, then it's not possible to cover this target.
        if(sum(o_cover(:,i)) == 0 && ismember(i, T_prime))
            res.exitflag = -1;
            return
        end
    end
    
    %% stage 1: selecting a target
    % h <- argmin(j in T') {(sum ((i in gamma) {?i, j}))/qj }
    minj = 1;
    minval = Inf;
    for j = 1:size(T_prime, 2)
        target = T_prime(j);
        num_sensors = 0;
        % sum (i in gamma) {omega(i, target)}
        for i = 1:Cparams.M
            if ismember(i, gamma)
                num_sensors = num_sensors + o_cover(i, target);
            end
        end
        temp = num_sensors / qi_prime(target);
        if temp < minval
            minval = temp;
            minj = target;
        end
    end
    h = minj;
    
    %% stage 2: select a sensor to cover the target
    % J: the set of unplaced sensors who could cover the selected target
    % first get the binary vector of whether the sensor could cover the
    % target
    list = o_cover(:, h);
    J = [];
    for i = 1:size(list,1)
        if list(i) == 1
            J = [J i];
        end
    end
    
    g_s = 0;  % best benefit
    i_s = -1; % sensor with best benefit
    P_s = []; % path with best benefit
    
    % get best benefit, sensor with best benefit, and the path to achieve
    % the benefit
    for i = 1:size(J,2)
        sensor = J(i); % index of the sensor

        % P: the list of the nodes in the shortest path
        % d: the length of the shortest path
        [P, d] = shortestpath(G, sensor, Cparams.M+1);
        
        % g <- |Ti ? T?|/(?i + cost(i))
        % first calculate numerator
        targets = o_cover(sensor, :);
        T_i = [];
        for j = 1:size(targets,2)
            if(targets(j) == 1)
                T_i  = [T_i j];
            end
        end
        intersection = intersect(T_i, T_prime);
        numerator = size(intersection, 2);

        % then calculate denominator
        denominator = d + cost(sensor);
        if ~ismember(sensor, U)
            denominator = denominator - sparams.w1;
        end
        
        g = numerator / denominator;
        if g > g_s
            g_s = g;
            i_s = sensor;
            P_s = P;
        end
    end
    
    %% stage 3: update target set and undeployed sensor set(gamma)
    % build the set of targets who could be covered by the selected sensor
    targets = o_cover(i_s, :);
    T_is = [];
    for j = 1:size(targets, 2)
        if(targets(j) == 1)
            T_is  = [T_is j];
        end
    end
    intersection = intersect(T_is, T_prime);
    % begin the update process
    for i = 1:size(intersection, 2)
        target = intersection(i);
        qi_prime(target) = qi_prime(target) - 1;
        
        % update T_prime
        if qi_prime(target) <= 0
            T_prime = T_prime(T_prime ~= target);
        end
    end
    
    % update undeployed sensor set
    gamma = gamma(gamma ~= i_s);
    
    s(i_s) = 1;
    x(i_s) = 1;
    %% stage 4: update the graph
    edges = G.Edges.EndNodes; % M by 2 matrices
    endpoints = edges(:, 2); % get the second column
    for i = 1:(size(P_s,2)-1)
        O_i = P_s(i);
        O_j = P_s(i + 1);
        x(O_i) = 1;
        
        % add the newly-selected node in Fij
        if O_j == Cparams.M+1
            fiB(O_i) = fiB(O_i) + Cparams.eta * Cparams.G;
        else
            fij_idx = (O_i - 1) * Cparams.M + O_j;
            fij(fij_idx) = fij(fij_idx) + Cparams.eta * Cparams.G;
        end
        
        % if i notin U
        if ~ismember(O_i, U)
            U = [U O_i];
            
            % update weight
            for i = 1:size(endpoints, 1)
                % endpoint is O_i
                if (endpoints(i) == O_i)
                    startpoint = edges(i, 1);
                    weight = sparams.w2 + cost(O_i);
                    G = rmedge(G, startpoint, O_i);
                    G = addedge(G, startpoint, O_i, weight);
                end
            end
        end
    end
end

res.fval = sum(x);
res.s = s;
res.fij = fij;
res.x = x;
res.fiB = fiB;
res.exitflag = 1;
end

%% get the set of sensors which can cover some targets
% O: deployment sites
% T: target sites
% S_r: sensing radius
%
% eff_s: the vector containing the index of sites at which placing a sensor
%        could cover some targets
function eff_s = get_efficient_sensors(O, T, S_r)
    eff_s = [];
    for i = 1:size(O,1)
        for j = 1:size(T,1)
            d = norm(O(i).position - T(j, :));
            if d <= S_r
                eff_s = [eff_s i];
                break
            end
        end
    end
end

%% create the network graph
% Args:
%   cost: cost vector of adding a solar panel
%   N: struct of the grid locations
%   dist: distance matrix between grid locations and the sink
%   C_r: communication radius
%   w1: cost for adding a new node
%   w2: cost for adding per area of solar panel
%
% Return:
%   G: the graph for finding shortest path

function G = create_graph(cost, N, dist, C_r, w1, w2)
N_cnt = size(N, 1);
st = [];
ed = [];
weights = [];
for i=1:N_cnt
    for j=i+1:N_cnt
        if dist(i, j) <= C_r
            % if connectable, add pair [i, j] and [j, i] to [st, ed]
            st = [st, i, j]; ed = [ed, j, i];
            % update weight from i to j and from j to i
            weight_ij = w1 + w2 * cost(i);
            weight_ji = w1 + w2 * cost(j);
            weights = [weights, weight_ij, weight_ji];
        end
    end
    if dist(i, N_cnt+1) <= C_r
        % if connectable, add pair [i, sink] to [st, ed]
        st = [st, i]; ed = [ed, N_cnt+1];
        % update weight from i to sink
        weight_iB = w1 + w2 * cost(i);
        weights = [weights, weight_iB];
    end
end
G = digraph(st, ed, weights);
%G.Edges
end

%% get the covered target by node i
% Args:
%   pos_i: the location of the ith node
%   O: list of targets to monitor
%   S_r: sensing radius
%
% Return:
%   O_cover: binary vector showing which targets can be covered by i

function O_cover = cover_targets(pos_i, O, S_r)
N_o = size(O, 1);               % number of targets to monitor
O_cover = zeros(N_o, 1);
for j=1:N_o
    if norm(O(j, :) - pos_i) <= S_r
        O_cover(j) = 1;
    end
end
end